{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/StateTable/StateTable.jsx","components/Cards/Cards.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/StateTable/StateTable.module.css","images/image.png"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","fetchStates","stateData","provinceState","active","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","value","options","legend","display","title","text","lineChart","borderColor","fill","className","styles","container","Countries","handleCountryChange","setCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","StateTable","setStateData","StyledTableCell","withStyles","theme","head","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","provinceData","classes","makeStyles","table","minWidth","useStyles","length","TableContainer","component","Paper","Table","stickyHeader","aria-label","TableHead","width","align","TableBody","scope","style","Info","Grid","spacing","justify","item","xs","md","Card","cx","card","infected","CardContent","Typography","gutterBottom","variant","start","end","duration","separator","Date","toDateString","App","state","setState","this","image","src","alt","Cards","CountryPicker","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.73d0a613.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__116iq\",\"card\":\"Cards_card__2yJuJ\",\"infected\":\"Cards_infected__2GCM6\",\"recovered\":\"Cards_recovered__IeJm1\",\"deaths\":\"Cards_deaths__EXzBh\"};","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchStates = async (country) => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/countries/${country.country}/confirmed`);\r\n    return data.map((stateData) => ({ provinceState: stateData.provinceState, confirmed: stateData.confirmed, active: stateData.active, recovered: stateData.recovered, deaths:stateData.deaths}));\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = await fetchDailyData();\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current situation in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  const lineChart = (\r\n    dailyData[0] ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst Countries = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\">Global</option>\r\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport { fetchStates } from '../../api';\r\nimport styles from './StateTable.module.css';\r\n\r\nconst StateTable = (country) => {\r\n  const [stateData, setStateData] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setStateData(await fetchStates(country));\r\n    };\r\n    fetchAPI();\r\n  }, [country]);\r\n\r\n  const StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell);\r\n\r\n  const StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n\r\n  const useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 100,\r\n    },\r\n  });\r\n\r\n  const provinceData = stateData;\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={styles.container}>\r\n      {provinceData.length > 1 ? (\r\n        <h3>Statewise Data for {country.country}</h3>) : <h3>Statewise Data for {country.country} is not Available</h3>}\r\n      {provinceData.length > 1 ? (\r\n        <TableContainer component={Paper}>\r\n          <Table className={classes.table} stickyHeader aria-label=\"sticky table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <StyledTableCell width=\"100\">States</StyledTableCell>\r\n                <StyledTableCell align=\"left\" width=\"50\">Confirmed</StyledTableCell>\r\n                <StyledTableCell align=\"left\" width=\"50\">Active</StyledTableCell>\r\n                <StyledTableCell align=\"left\" width=\"50\">Recovered</StyledTableCell>\r\n                <StyledTableCell align=\"left\" width=\"50\">Deaths</StyledTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {provinceData.length > 1 ? provinceData.map((data) => (\r\n                <StyledTableRow key={data.provinceState}>\r\n                  <StyledTableCell component=\"th\" scope=\"row\">\r\n                    {data.provinceState}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell style={{ color: 'rgba(0, 139, 139, 0.8)' }} align=\"left\">{data.confirmed}</StyledTableCell>\r\n                  <StyledTableCell style={{ color: 'rgba(0, 0, 255, 0.8)' }} align=\"left\">{data.active}</StyledTableCell>\r\n                  <StyledTableCell style={{ color: 'rgba(0, 140, 0, 0.8)' }} align=\"left\">{data.recovered}</StyledTableCell>\r\n                  <StyledTableCell style={{ color: 'rgba(255, 0, 0, 0.8)' }} align=\"left\">{data.deaths}</StyledTableCell>\r\n                </StyledTableRow>\r\n              )) : 'Statewise Data for this Country is not Available.'}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\nexport default StateTable;","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Info = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return 'Loading...';\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <CountUp start={0} end={confirmed.value} duration={2.75} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of active cases of COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <CountUp start={0} end={recovered.value} duration={2.75} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of recoveries from COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <CountUp start={0} end={deaths.value} duration={2.75} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of deaths caused by COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default Info;\r\n","import React from 'react';\r\n\r\nimport { Cards, CountryPicker, Chart, StateTable } from './components';\r\nimport { fetchData } from './api/';\r\nimport styles from './App.module.css';\r\n\r\nimport image from './images/image.png';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: '',\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const data = await fetchData();\r\n\r\n    this.setState({ data });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const data = await fetchData(country);\r\n\r\n    this.setState({ data, country: country });\r\n  }\r\n\r\n  render() {\r\n    const { data, country } = this.state;\r\n\r\n    return (\r\n      <div className={styles.container}>\r\n        <img className={styles.image} src={image} alt=\"COVID-19\" />\r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} /> \r\n        {country?<StateTable country={country} />:null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1wNg5\",\"image\":\"App_image__3H7sK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__34VvV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3hrp1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"StateTable_container__3K5JK\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}